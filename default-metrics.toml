[[metric]]
context = "sessions"
labels = [ "status", "type" ]
metricsdesc = { value= "Gauge metric with count of sessions by status and type." }
request = "SELECT status, type, COUNT(*) as value FROM v$session GROUP BY status, type"

[[metric]]
context = "process"
metricsdesc = { count="Gauge metric with count of processes." }
request = "SELECT COUNT(*) as count FROM v$process"

[[metric]]
context = "resource"
labels = [ "resource_name" ]
metricsdesc = { current_utilization= "Generic counter metric from v$resource_limit view in Oracle (current value).", limit_value="Generic counter metric from v$resource_limit view in Oracle (limit value)." }
request="SELECT resource_name,current_utilization,limit_value FROM v$resource_limit"

[[metric]]
context = "asm_diskgroup"
labels = [ "name" ]
metricsdesc = { used_mb = "used size of ASM disk group.", free_mb = "free space available on ASM disk group." }
request = "SELECT name, free_mb, (total_mb - free_mb) as used_mb FROM v$asm_diskgroup"
ignorezeroresult = true

[[metric]]
context = "user_activity"
labels = [ "name" ]
metricsdesc = { value="Generic counter metric name from v$sysstat view in Oracle.", value="Generic counter metric value from v$sysstat view in Oracle." }
request = "SELECT name, value FROM v$sysstat WHERE name IN ('parse count (total)', 'execute count', 'user commits', 'user rollbacks')"

[[metric]]
context = "wait_time"
labels = [ "wait_class" ]
metricsdesc = { wait_class="Generic counter metric from v$waitclassmetric view in Oracle.", value="Generic counter metric from v$waitclassmetric view in Oracle (value)." }
request = '''
SELECT
  n.wait_class as WAIT_CLASS,
  round(m.time_waited/m.INTSIZE_CSEC,3) as VALUE
FROM
  v$waitclassmetric  m, v$system_wait_class n
WHERE
  m.wait_class_id=n.wait_class_id AND n.wait_class != 'Idle'
'''

[[metric]]
context = "physical_bytes"
labels = [ "metric_name" ]
metricsdesc = { metric_name="Generic counter metric from v$sysmetric view in Oracle.", value="Generic counter metric from v$sysmetric view in Oracle (value)." }
request = "select metric_name,value from v$sysmetric where metric_name like 'Physical%Total Bytes Per Sec' "

[[metric]]
context = "physical_iops"
labels = [ "metric_name" ]
metricsdesc = { metric_name="Generic counter metric from v$sysmetric view in Oracle.", value="Generic counter metric from v$sysmetric view in Oracle (value)." }
request = "select metric_name,value from v$sysmetric where metric_name like 'Physical%Total IO Requests Per Sec' "

[[metric]]
context = "cache_hit_ratio"
labels = [ "metric_name" ]
metricsdesc = { metric_name="Generic counter metric from v$sysmetric view in Oracle.", value="Generic counter metric from v$sysmetric view in Oracle (value)." }
request = "select metric_name,value from v$sysmetric where metric_name like '%Hit Ratio' "

[[metric]]
context = "tablespace"
labels = [ "tablespace_name" ]
metricsdesc = { total_free = "total free", total_used = "total used", perc_free="perc free" }
request = '''
SELECT *
FROM
(
WITH my_ddf AS
    (
         SELECT file_id, tablespace_name, 
         DECODE (autoextensible, 'YES', GREATEST (BYTES, maxbytes), BYTES ) mysize,
         DECODE (autoextensible, 'YES', CASE WHEN (maxbytes > BYTES) THEN (maxbytes - BYTES) ELSE 0 END, 0 ) growth
         FROM dba_data_files
	)
SELECT   my_ddf.tablespace_name,
         ROUND (SUM (my_ddf.mysize)) autoext_maxsize,
         ROUND (SUM (growth)) growth,
         ROUND ((SUM (NVL (freebytes, 0)))) curr_df_free,
         ROUND ((SUM (NVL (freebytes, 0)) + SUM (growth))) total_free,
         ROUND (SUM (my_ddf.mysize)) - ( ROUND ((SUM (NVL (freebytes, 0)) + SUM (growth)))) as total_used,       
         ROUND ((SUM (NVL (freebytes, 0)) + SUM (growth)) / SUM (my_ddf.mysize) * 100 ) perc_free
    FROM my_ddf, (SELECT file_id, SUM (BYTES) freebytes FROM dba_free_space GROUP BY file_id) dfs
    WHERE my_ddf.file_id = dfs.file_id(+) 
GROUP BY my_ddf.tablespace_name
)
UNION
SELECT * FROM
(
WITH my_ddf AS
    (
		 SELECT tablespace_name,
         DECODE (autoextensible, 'YES', GREATEST (BYTES, maxbytes), BYTES ) mysize,
         DECODE (autoextensible, 'YES', CASE WHEN (maxbytes > BYTES) THEN (maxbytes - BYTES) ELSE 0 END, 0 ) growth
         FROM dba_temp_files
	)
SELECT   my_ddf.tablespace_name,
         ROUND (SUM (my_ddf.mysize)) as autoext_maxsize,
         ROUND (SUM (growth)) as growth,
         ROUND ((SUM (NVL (free_space, 0)))) as curr_df_free,
         ROUND ((SUM (NVL (free_space, 0)) + SUM (growth))) as total_free,
         ROUND (SUM (my_ddf.mysize)) - ( ROUND ((SUM (NVL (free_space, 0)) + SUM (growth)))) as total_used,       
         ROUND ((SUM (NVL (free_space, 0)) + SUM (growth)) / SUM (my_ddf.mysize) * 100 ) as perc_free
    FROM my_ddf, (SELECT tablespace_name, free_space FROM dba_temp_free_space) dfs
   WHERE my_ddf.tablespace_name = dfs.tablespace_name(+)    
GROUP BY my_ddf.tablespace_name
) '''

[[metric]]
context = "blockers"
labels = [ "sql_id" ]
metricsdesc = { sql_id = "blocker sql_id", sid = "blocker sid" }
metricstype = { sid = "gauge" }
request = "select s.sql_id, b.HOLDING_SESSION as sid from  v$session s, dba_blockers b where b.HOLDING_SESSION=s.BLOCKING_SESSION"
ignorezeroresult = true

[[metric]]
context = "waiters"
labels = [ "sql_id" ]
metricsdesc = { sql_id = "waiter sql_id", sid = "waiter sid" }
metricstype = { sid = "gauge" }
request = "select s.sql_id, w.WAITING_SESSION as sid from  v$session s, dba_waiters w where w.WAITING_SESSION=s.SID"
ignorezeroresult = true


[[metric]]
context = "database"
labels = [ "dbname" ]
metricsdesc = { dbname = "database name" }
request = "select name as dbname, 0 as value from v$database"

[[metric]]
context = "uptime"
metricsdesc = { value = "database uptime" }
request = "select (sysdate-startup_time) as value from v$instance"

[[metric]]
context = "database_info"
labels = [ "database_status", "database_role" ]
metricsdesc = { value = "database information" }
request = "select status as database_status, database_role, 1 as value from v$instance, v$database where rownum=1"



